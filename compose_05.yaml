#version: "3.8"

# Arquivo .env
# Podem ser criados vários arquivos, tais como:
# homolog.env  prod.env   desenv.env
# exemplo: docker compose up --env-file desenv.env up -d 

services:
  postgres:
    image: danielucb/devops-postres-volume:${POSTGRES_TAG:-latest}  # definido com o valor padrão latest, se não for definido
    #image: danielucb/devops-postres-volume:${POSTGRES_TAG}
    build:
      context: .
      dockerfile: Dockerfile.postgres
    ports:
      - 5432:5432
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - devops-kubenews_vol-postres:/var/lib/postgresql/data
    networks:
      - kube_news_net
  
  kubenews:
    image: danielucb/devops-node-volume:${KUBE_NEWS_TAG}
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - 8080:8080
    networks:
      - kube_news_net
    environment: 
      - DB_DATABASE=${POSTGRES_DB}
      - DB_USERNAME=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_HOST=postgres   # passo o nome do service
    depends_on:
      - postgres

volumes:
  devops-kubenews_vol-postres:
    name: devops-kubenews_vol-postres  # mantendo o nome anterior
    external: true  # utilizar um volume existente

networks:
  kube_news_net:
    name: kube_news_net
    driver: bridge

# docker compose up -d --build    >> para reconstruir a imagem